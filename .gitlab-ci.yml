# The Docker image that will be used to build your app
image: swift:5.9

variables:
  CI_IMAGE: $CI_REGISTRY/dracks/$CI_PROJECT_NAME
  PLATFORM: linux/amd64

default:
  cache:  # Cache modules in between jobs
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .build/
  #before_script:
  #  - if [ -e /usr/bin/swift ]; then echo "Swift process"; fi
  #  - if [ -e /usr/bin/swift ]; then swift package --cache-path .build/cache; fi

stages:
  - test
  - build
  - deploy

run-test:
  stage: test
  script:
    - swift test --parallel --enable-code-coverage --xunit-output ./code-cov.xml
    - llvm-cov export -format=lcov -instr-profile=.build/debug/codecov/default.profdata .build/debug/swift-language-studyPackageTests.xctest > lcov.info 
  artifacts:
    when: always
    paths:
      - code-cov.xml
      - lcov.info

test-coverage:
  stage: test
  image: python:3.12.1-slim-bookworm
  needs:
    - run-test
  dependencies: 
    - run-test
  script:
    - pip3 install lcov_cobertura
#    - wget https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py
    - lcov_cobertura lcov.info
  except:
    - tags
    
  artifacts:
    when: always
    paths:
      - coverage.xml
      - code-cov.xml
    reports:
      junit: code-cov.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

format:
  stage: test
  script:
    - swift run swift-format lint -r swift-language-study swift-language-study-tests
  except:
    - tags

build-image:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - docker buildx build --push -t "$CI_IMAGE:$CI_COMMIT_TAG" -t "$CI_IMAGE" --platform "$PLATFORM" . --target runtime
  only:
    - tags



